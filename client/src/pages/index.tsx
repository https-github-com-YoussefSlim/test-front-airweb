import { NextPageContext } from 'next';
import useTranslation from 'next-translate/useTranslation';
import Head from 'next/head';
import useSWR from 'swr';

import { Card } from '@/components';
import { StaleIndicator } from '@/components/loading';
import { ssrRedirect, routeNames, createSSRHttpClient, endPoints } from '@/support';
import { Category, Product } from '@/types';
import { sortLabel } from '@/utils';

// eslint-disable-next-line react/function-component-definition
export default function Index({
  ssrCategories,
  ssrProducts,
}: {
  ssrProducts: Product[];
  ssrCategories: Category[];
}) {
  const { t } = useTranslation('common');
  const { data: products, isValidating } = useSWR<Product[]>(endPoints.products, {
    fallbackData: ssrProducts,
  });

  const { data: categories } = useSWR<Category[]>(endPoints.categories, {
    fallbackData: ssrCategories,
  });
  const productsByCategory = categories?.map((category) => {
    const productfiltred = products?.filter((product) => product.category_id === category.id);

    return { ...category, productfiltred };
  });

  return (
    <div>
      <Head>
        <title>Airweb | {t`E-shop`}</title>
        <meta content="Generated by create next app" name="description" />
        <link href="/favicon.png" rel="icon" />
      </Head>
      <StaleIndicator isValidating={isValidating}>
        {productsByCategory?.sort(sortLabel).map((c) => (
          <section key={c.id} className="col justify-center mb-6 space-y-5 gap-2">
            <h2 className="font-bold">{c.label}</h2>
            <div className="row justify-center flex-wrap space-y-5 xl:space-x-5 xl:space-y-0">
              {c.productfiltred?.sort(sortLabel).map((p) => (
                <Card key={p.id} {...p} />
              ))}
            </div>
          </section>
        ))}
      </StaleIndicator>
    </div>
  );
}

export const getServerSideProps = async ({ req }: NextPageContext) => {
  try {
    const httpClient = createSSRHttpClient(req);
    const ssrProducts = await httpClient.get<Product[]>(endPoints.products);
    const ssrCategories = await httpClient.get<Category[]>(endPoints.categories);

    return {
      props: { ssrProducts, ssrCategories },
    };
  } catch (error) {
    return ssrRedirect(routeNames.error);
  }
};
